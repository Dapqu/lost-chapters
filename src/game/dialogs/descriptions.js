import { sounds } from "../utils/audio";
import { talkToMyself } from "../utils/dialog";
import { dialogs } from "../dialogs/";

export function readDescription(name) {
    let description = dialogs[name]

    if (typeof description === "function") description = { action: description }

    description.before = description.before || (() => Promise.resolve())
    description.after = description.after || (() => Promise.resolve())

    description.before()
        .then(() => talkToMyself(description.action(game.save)))
        .then(() => description.after())
}

export const croquis_astro = save => ([
    `C'est une pile de croquis astronomiques incompr√©hensibles.`,
    `Il semble que les √©tudiants se soient beaucoup int√©ress√©s √† la Lune.`
])

export const telescope = save => ([
    `Ce t√©l√©scope est dirig√© vers la Lune.`,
    `La lune est rouge ce soir √† cause de l'Eclipse.`
])

export const book_alphabet = save => {
    if (!save.hasDiscoveredAlphabet) {
        save.hasDiscoveredAlphabet = true;
        return [
            `Ce livre contient la transcription des runes aux tableau.`,
            `Je vais noter √ßa pour essayer de les d√©chiffrer...`
        ]
    }

    return [
        `J'ai not√© la transcription des runes dans mon calepin.`,
        `Je devrais pouvoir d√©chiffrer les runes maintenant.`
    ]
}

export const runes_inconnues = save => ([
    `De dr√¥les de runes sont trac√©es ici.`,
    `Elles changent selon l'angle sous lequel on les regarde.`,
    `Je n'y comprends rien...`
])

export const traduction_tableau = save => ([
    `Que tout le monde se rassemble au terrier`
])

export const panneau_sanctuaire = save => ([
    `Le chemin ne sera ouvert qu'√† ceux qui ont brav√© leurs peurs`
])

export const panneau_entree_universite = save => ([
    `ü†à Universit√© Miskatonic`
])

export const charnier = save => ([
    `Un charnier, ici ? L'odeur est atroce...`
])

export const charnier2 = save => ([
    `Parmi les cadavres d'animaux, je crois voir des ossements humains !`,
    `Mon esprit doit me jouer des tours...`
])

export const precipice = save => ([
    `L'√©boulement est r√©cent. Je ne passerais pas par l√†...`
])

export const trou_grotte = {
    action() {
        if (game.save.planquesFound.includes("trou_grotte")) {
            return [
                `Ces planques doivent servir √† cacher la drogue des cultistes...`
            ]
        } else {
            return [
                `Il y a un seau suspendu dans ce trou... Je peux le remonter.`,
                `Il contient quelques potions au contenu verd√¢tre.`
            ]
        }
    },
    after() {
        if (game.save.planquesFound.includes("trou_grotte")) return;
        game.save.inventory.potionDeLucidite += 2;
        sounds.ITEM.play();
        game.save.planquesFound.push("trou_grotte");
    }
}

export const mare_grotte = {
    action() {
        if (game.save.planquesFound.includes("mare_grotte")) {
            return [
                `Les cultistes utilisent ces stimulants pour mieux percevoir les signes runiques.`
            ]
        } else {
            return [
                `Une potion bleut√©e est √† moiti√© ensevelie au fond de l'eau.`,
                `Elle porte une √©tiquette d√©lav√©e: "Psycho-stimulant"`
            ]
        }
    },
    after() {
        if (game.save.planquesFound.includes("mare_grotte")) return;
        game.save.inventory.potionDeForce += 1;
        sounds.ITEM.play();
        game.save.planquesFound.push("mare_grotte");
    }
}

export const tombe_grotte = {
    action() {
        if (game.save.planquesFound.includes("tombe_grotte")) {
            return [
                `D'apr√®s ce que m'a dit soeur Marie, cette potion des d√©vots`,
                `sert √† sceller les signes runiques pour √©loigner le mal.`,
                `On dirait que √ßa n'a pas march√© pour cette pauvre femme.`
            ]
        } else {
            return [
                `Quelle horreur ! C'est une tombe fra√Æchement creus√©e !`,
                `Une victime g√Æt au fond. Elle porte les v√™tements des d√©vots √† l'or√©e`,
                `de la for√™t, ainsi qu'une fiole ros√©e autour du cou.`,
                `Je vais la r√©cup√©rer. Elle n'en aura plus besoin...`
            ]
        }
    },
    after() {
        if (game.save.planquesFound.includes("tombe_grotte")) return;
        game.save.inventory.potionDeProtection += 1;
        sounds.ITEM.play();
        game.save.planquesFound.push("tombe_grotte");
    }
}

export const lockedExits = {
    sanctuaire: {
        backDirection: "UP",
        backDuration: 500,
        message: [
            `Je ne peux pas partir maintenant, il faut que je parle √† Franck.`
        ]
    }
}